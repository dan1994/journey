#pragma once

#include "drivers/vga3.hpp"

// A global to hold the line number converted to string in a safe manner.
extern char line_number_as_char_ptr[8];

/**
 * Converts the line number to a char array and stores it in a dedicated global.
 *
 * We use this approach here since we want to make sure that logic in assert can
 * never fail, and thus avoid dynamic allocations.
 *
 * @param line_number The line number.
 */
void line_number_to_char_ptr(size_t line_number);

/**
 * In debug mode, if the condition is not met, assert prints a message
 * indicating the location of assertion and then enters an infinite loop.
 */
#ifndef NDEBUG
#define assertm(condition, message)                                           \
    if (!(condition)) {                                                       \
        line_number_to_char_ptr(__LINE__);                                    \
        drivers::Vga3::print("ASSERTION: ", drivers::Vga3::Color::LIGHT_RED); \
        drivers::Vga3::print(__FILE__ ":");                                   \
        drivers::Vga3::print(__PRETTY_FUNCTION__);                            \
        drivers::Vga3::print(":");                                            \
        drivers::Vga3::print(line_number_as_char_ptr);                        \
        if (message && *message) {                                            \
            drivers::Vga3::print(": ");                                       \
            drivers::Vga3::print(message);                                    \
        }                                                                     \
        drivers::Vga3::print("\n");                                           \
        while (true) {                                                        \
        }                                                                     \
    }
#else
#define assertm(condition, message) \
    do {                            \
    } while (0)
#endif

#define assert(condition) assertm(condition, "")
