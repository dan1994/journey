#pragma once

#include <stddef.h>

#include <iterator>

namespace std {

class string final {
   public:
    using iterator = char*;
    using const_iterator = const char*;
    constexpr static size_t npos = -1;

    explicit string();

    string(const string& other);
    string(string&& other);

    explicit string(size_t size, char character);
    explicit string(const string& other, size_t position);
    explicit string(const string& other, size_t position, size_t count);
    string(const char* character_array);
    explicit string(const char* character_array, size_t count);
    template <InputIterator<char> CharInputIterator>
    explicit string(CharInputIterator first, CharInputIterator last);

    ~string();

    string& operator=(const string& other);
    string& operator=(string&& other);

    char& operator[](size_t offset);
    const char& operator[](size_t offset) const;
    const char& at(size_t offset) const;

    const char* c_str() const;
    char* data();

    iterator begin();
    const_iterator cbegin() const;
    iterator end();
    const_iterator cend() const;

    bool empty() const;
    size_t size() const;
    size_t length() const;
    size_t capacity() const;

    void reserve(size_t size);
    void shrink_to_fit();

    string& operator+=(const string& str);
    string& operator+=(char ch);
    string& operator+=(const char* str);
    string& append(const char* str, size_t size);

    int compare(const string& str) const;
    int compare(const char* str) const;

    string substr(size_t pos = 0, size_t count = npos) const;

   private:
    void resize(size_t size);

    char* data_;
    size_t size_;
    size_t capacity_;

    static char placeholder_;
};

template <InputIterator<char> CharInputIterator>
string::string(CharInputIterator first, CharInputIterator last) {
    size_t length = 0;
    for (CharInputIterator current = first; current != last; current++) {
        length++;
    }

    const size_t byte_count_including_terminator = length + 1;

    data_ = new char[byte_count_including_terminator];
    size_ = length;
    capacity_ = length;

    size_t i = 0;
    for (CharInputIterator current = first; current != last; current++, i++) {
        data_[i] = *current;
    }
    data_[i] = '\0';
}

bool operator==(const string& lhs, const string& rhs);
bool operator==(const string& lhs, const char* rhs);
bool operator==(const char* lhs, const string& rhs);

bool operator!=(const string& lhs, const string& rhs);
bool operator!=(const string& lhs, const char* rhs);
bool operator!=(const char* lhs, const string& rhs);

bool operator<(const string& lhs, const string& rhs);
bool operator<(const string& lhs, const char* rhs);
bool operator<(const char* lhs, const string& rhs);

bool operator<=(const string& lhs, const string& rhs);
bool operator<=(const string& lhs, const char* rhs);
bool operator<=(const char* lhs, const string& rhs);

bool operator>(const string& lhs, const string& rhs);
bool operator>(const string& lhs, const char* rhs);
bool operator>(const char* lhs, const string& rhs);

bool operator>=(const string& lhs, const string& rhs);
bool operator>=(const string& lhs, const char* rhs);
bool operator>=(const char* lhs, const string& rhs);

string to_string(int number);
string to_string(long number);
string to_string(unsigned int number);
string to_string(unsigned long number);

namespace internal {

size_t get_digit_number(unsigned long number);
void number_to_characters(char* buffer, unsigned long number, size_t digit_num);

}  // namespace internal

string operator+(const char* string1, const string& string2);

}  // namespace std
