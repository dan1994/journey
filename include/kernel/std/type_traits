#pragma once

namespace std {

template <typename T, T v>
struct integral_constant {
    using value_type = T;
    using type = integral_constant;

    static constexpr T value = v;

    constexpr operator value_type() const noexcept {
        return value;
    }

    constexpr value_type operator()() const noexcept {
        return value;
    }
};

template <typename T>
struct is_enum : public integral_constant<bool, __is_enum(T)> {};

template <typename T>
inline constexpr bool is_enum_v = is_enum<T>::value;

template <typename Enum>
using underlying_type_t = __underlying_type(Enum);

}  // namespace std
