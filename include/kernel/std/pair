#pragma once

#include "std/internal/type_traits/integral_constant.hpp"
#include "std/internal/utility/structured_bindings.hpp"

namespace std {

template <typename T1, typename T2>
struct pair final {
    T1 first;
    T2 second;
};

template <typename T1, typename T2>
struct tuple_size<std::pair<T1, T2>> : integral_constant<size_t, 2> {};

template <size_t I, typename T1, typename T2>
struct tuple_element<I, std::pair<T1, T2>> {
    static_assert(I < 2, "std::pair has only 2 elements!");
};

template <typename T1, typename T2>
struct tuple_element<0, std::pair<T1, T2>> {
    using type = T1;
};

template <typename T1, typename T2>
struct tuple_element<1, std::pair<T1, T2>> {
    using type = T2;
};

template <size_t I, typename T1, typename T2>
auto get(std::pair<T1, T2> pair) {
    if constexpr (I == 0) {
        return pair.first;
    } else {
        return pair.second;
    }
}

}  // namespace std
